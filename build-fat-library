#!/bin/sh

### File: "build-fat-library"
### Copyright 2014 Axis Sivitz

### Borrows code and ideas from build-gambit-iOS in the Gambit Scheme project, which is
### Copyright (c) 2010-2012 by Marc Feeley, All Rights Reserved.

set -e # turn on error checking

# The following options can be set from the command line.
num_simultaneous_jobs=2

fat_prefix="fat-lib"

libs_prefix="lib"

custom_build()
{
   make clean
   ./configure --disable-shared $config_options_extras
   make
}

select_ios()
{
  platform_type="$1"
  arch="$2"

  ios_platform="$platform_type.platform"

  developer_dir="`xcode-select --print-path`"
  platforms_dir="$developer_dir/Platforms"
  ios_platform_dir="$platforms_dir/$ios_platform"
  ios_sdks="$ios_platform_dir/Developer/SDKs"

  sdk_version=`(cd "$ios_sdks"; ls -1d *.sdk |sed -e 's/\.sdk$//' -e 's/^[^0-9\.]*//' |awk 'BEGIN{best = 0.0}($0 + 0.0) > best + 0.0{best = $0;}END{print best}')`
  ios_sdk="$platform_type$sdk_version.sdk"

  ios_sdk_dir="$ios_sdks/$ios_sdk"

  echo "*** Selecting platform \"$ios_platform\" and SDK \"$ios_sdk\" for \"$arch\"."

  case "$platform_type" in

           iPhoneOS) config_options_extras=--host=arm-apple-darwin
                     sdk_name="iphoneos"
                     ;;

    iPhoneSimulator) config_options_extras=
                     sdk_name="iphonesimulator"
                     ;;

  esac

  export CC="xcrun -sdk $sdk_name gcc -isysroot $ios_sdk_dir -arch $arch -miphoneos-version-min=5.0"
  export CXX="xcrun -sdk $sdk_name g++ -isysroot $ios_sdk_dir -arch $arch -miphoneos-version-min=5.0"
  export CFLAGS="-Wno-trigraphs -Wreturn-type -Wunused-variable"
  export CXXFLAGS="$CFLAGS"
  export LD="ld -arch $arch"
  export LDFLAGS=""
}

make_it()
{
  platform_type="$1"
  arch="$2"

  select_ios "$platform_type" "$arch"
  custom_build
}

build_one_ios()
{
  make_it "$1" "$2"

  for library in `(cd $libs_prefix; ls *.a)` ; do

    if [ -e "$fat_prefix/$library" ]; then

      # Combine the libraries of the various architectures into a universal library.

      lipo $fat_prefix/$library $libs_prefix/$library -output $fat_prefix/new-$library -create
      mv $fat_prefix/new-$library $fat_prefix/$library
    else
       cp $libs_prefix/$library $fat_prefix/
    fi
  done
}

build_all_ios()
{
  rm -rf $fat_prefix
  mkdir $fat_prefix

  build_one_ios iPhoneSimulator i386

  for arch in armv7 armv7s ; do
    build_one_ios iPhoneOS "$arch"
  done
}

script_name="build-fat-library"

while getopts j:l:h option
do
        case "${option}"
        in
           h)
           echo "$script_name - build a fat library for iOS"
           echo " "
           echo "$script_name [options] source_folder"
           echo " "
           echo "options:"
           echo "-h                Show help"
           echo "-j <number>       Number of simultaneous jobs for make to use."
           echo "                  Should be equal to number of CPU cores."
           echo "-l <dir>          Location of built .a libraries relative to source_folder"
           echo " "
           echo "example: sh build-fat-library.sh -j4 -l .libs libpng-1.6.10/"
           exit 0
           ;;
           j) num_simultaneous_jobs=${OPTARG};;
           l) libs_prefix=${OPTARG};;
           n) update_with_latest_changes_if_downloaded=no;;
      esac
done

shift $(($OPTIND - 1))

cd $1
build_all_ios
